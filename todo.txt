[ ] review RAM_Interface handling of Uart interface
[ ] os.c: name_t instead of location_name, entity_name and object_name
[ ] os.c: upload executable hex data through terminal by specifying destination and size
[ ] os.c: executable functions attached to objects, locations and entities
[ ] os.c: create objects, locations and entities
[ ] os.c: rename objects, locations and entities
[ ] os.c: 'examine' command displays more info
[ ] os.c: 'use' command to combine objects
[ ] os.c: ? id in objects, locations and entities
[ ] os.c: memory management of dynamic lists (128-4 entries in a slice, linked slices)
[ ] SoC: alu op with mux of register and immediate instead of cases
[ ] SoC: pc module with selectable next value from mux of branch, increment etc
[ ] sim_1: RAM.S: leds assumed to be at 0xffff_ffff
[ ] sim_3: RAM.S: address of uart send data hardcoded in code. make .equ
[ ] sim_4: RAM.S: address of uart receive data hardcoded in code. make .equ
[ ] UartTx operates on negative clock edge 
----------------------------------------------------------------------------------
[-] implement ECALL => no system calls in intended code
[-] implement EBREAK => no support for debugger
[x] RAM depth to use all block memory (currently 32 out of 45)
    => cannot synthesize more than 32768 4 byte words without using more than 45 blocks
[-] Uart cannot send or receive 0 => ok since meant for use with terminal and text
[x] UartTx and UartRx mapped to upper memory,
[x]   e.g. byte at 0xffff_fffe for UartTx. UartTx writes zero after transmission of a byte.
      => 0x1_fffe
[x]   e.g. byte at 0xffff_fffd for UartRx. cpu writes 0 for UartRx to receive next.
      => 0x1_fffd 
[x] generated assembly code does a write to an uninitialized stack before set_stack_pointer
    0:	ff010113          	addi	x2,x2,-16
    4:	000207b7          	lui	x15,0x20
    8:	00112623          	sw	x1,12(x2)
    c:	ffc78793          	addi	x15,x15,-4 # 1fffc
    10:	00078113          	addi	x2,x15,0
    => fixed with os_start.S that sets up the stack pointer
[x] Led and rgb at one byte 0xffff_ffff {b,g,r,led[3:0]}
[-]     FENCE.I
[-]     FENCE => not a multithreaded implementation
