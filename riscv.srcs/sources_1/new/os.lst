
os:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_start>:
# .global _start
# 
# # sets up the stack before calling c function 'run' in 'os.c'
# _start:
#     lui sp, 0x2         # set stack at # 0x1fff0
   0:	00002137          	lui	x2,0x2
#     addi sp, sp, -16    #
   4:	ff010113          	addi	x2,x2,-16 # 1ff0 <__global_pointer$+0x134>
   8:	004000ef          	jal	x1,c <run>

0000000c <run>:
# void handle_inbuf();
# 
# unsigned char active_entity = 1;
# 
# void run() {
#   uart_send_str(hello);
   c:	000027b7          	lui	x15,0x2
  10:	9b47a503          	lw	x10,-1612(x15) # 19b4 <hello>
# void run() {
  14:	ff010113          	addi	x2,x2,-16
  18:	00812423          	sw	x8,8(x2)
  1c:	00112623          	sw	x1,12(x2)
#   while (1) {
#     describe_current_location();
#     uart_send_str("> ");
  20:	00000437          	lui	x8,0x0
#   uart_send_str(hello);
  24:	00000097          	auipc	x1,0x0
  28:	4fc080e7          	jalr	x1,1276(x1) # 520 <uart_send_str>
#     describe_current_location();
  2c:	00000097          	auipc	x1,0x0
  30:	058080e7          	jalr	x1,88(x1) # 84 <describe_current_location>
#     uart_send_str("> ");
  34:	66c40513          	addi	x10,x8,1644 # 66c <delay+0xa0>
  38:	00000097          	auipc	x1,0x0
  3c:	4e8080e7          	jalr	x1,1256(x1) # 520 <uart_send_str>
#     input_inbuf();
  40:	00000097          	auipc	x1,0x0
  44:	428080e7          	jalr	x1,1064(x1) # 468 <input_inbuf>
#     handle_inbuf();
  48:	00000097          	auipc	x1,0x0
  4c:	28c080e7          	jalr	x1,652(x1) # 2d4 <handle_inbuf>
#   while (1) {
  50:	fddff06f          	jal	x0,2c <run+0x20>

00000054 <strings_equal>:
#   }
# }
# 
# bool strings_equal(const char *s1, const char *s2) {
  54:	00050793          	addi	x15,x10,0
#   while (1) {
#     char diff = *s1 - *s2;
  58:	0007c703          	lbu	x14,0(x15)
  5c:	0005c503          	lbu	x10,0(x11)
#     if (diff)
  60:	00a71e63          	bne	x14,x10,7c <strings_equal+0x28>
#       return FALSE;
#     if (!*s1 && !*s2)
  64:	00051663          	bne	x10,x0,70 <strings_equal+0x1c>
  68:	00100513          	addi	x10,x0,1
  6c:	00008067          	jalr	x0,0(x1)
#       return TRUE;
#     if (!*s1 || !*s2)
#       return FALSE;
#     s1++;
  70:	00178793          	addi	x15,x15,1
#     s2++;
  74:	00158593          	addi	x11,x11,1
#   while (1) {
  78:	fe1ff06f          	jal	x0,58 <strings_equal+0x4>
#       return FALSE;
  7c:	00000513          	addi	x10,x0,0
#   }
# }
  80:	00008067          	jalr	x0,0(x1)

00000084 <describe_current_location>:
# 
# void describe_current_location() {
#   uart_send_str("u r in ");
  84:	00000537          	lui	x10,0x0
# void describe_current_location() {
  88:	fd010113          	addi	x2,x2,-48
#   uart_send_str("u r in ");
  8c:	67050513          	addi	x10,x10,1648 # 670 <delay+0xa4>
# void describe_current_location() {
  90:	02112623          	sw	x1,44(x2)
  94:	02812423          	sw	x8,40(x2)
  98:	02912223          	sw	x9,36(x2)
  9c:	03212023          	sw	x18,32(x2)
  a0:	01312e23          	sw	x19,28(x2)
  a4:	01412c23          	sw	x20,24(x2)
  a8:	01512a23          	sw	x21,20(x2)
  ac:	01612823          	sw	x22,16(x2)
  b0:	01712623          	sw	x23,12(x2)
  b4:	01812423          	sw	x24,8(x2)
#   unsigned char current_location = entities[active_entity].location;
  b8:	00002937          	lui	x18,0x2
#   uart_send_str("u r in ");
  bc:	00000097          	auipc	x1,0x0
  c0:	464080e7          	jalr	x1,1124(x1) # 520 <uart_send_str>
#   unsigned char current_location = entities[active_entity].location;
  c4:	9b894683          	lbu	x13,-1608(x18) # 19b8 <active_entity>
  c8:	000029b7          	lui	x19,0x2
  cc:	92498713          	addi	x14,x19,-1756 # 1924 <entities>
  d0:	00269793          	slli	x15,x13,0x2
  d4:	00d787b3          	add	x15,x15,x13
  d8:	00379793          	slli	x15,x15,0x3
  dc:	00f707b3          	add	x15,x14,x15
  e0:	0047c703          	lbu	x14,4(x15)
#   uart_send_str(locations[current_location].name);
  e4:	000014b7          	lui	x9,0x1
  e8:	6d448793          	addi	x15,x9,1748 # 16d4 <locations>
  ec:	00371413          	slli	x8,x14,0x3
  f0:	00e40433          	add	x8,x8,x14
  f4:	00241413          	slli	x8,x8,0x2
  f8:	00e40433          	add	x8,x8,x14
  fc:	00241413          	slli	x8,x8,0x2
 100:	008787b3          	add	x15,x15,x8
 104:	0007a503          	lw	x10,0(x15)
 108:	08440a93          	addi	x21,x8,132
#   uart_send_str("\r\nu c: ");
#   // print entities in current location
#   unsigned char add_list_sep = 0;
#   const entity_id *ents = locations[current_location].entities;
#   for (unsigned i = 0; i < LOCATION_MAX_ENTITIES; i++) {
 10c:	00000b93          	addi	x23,x0,0
#   uart_send_str(locations[current_location].name);
 110:	00000097          	auipc	x1,0x0
 114:	410080e7          	jalr	x1,1040(x1) # 520 <uart_send_str>
#   uart_send_str("\r\nu c: ");
 118:	00000537          	lui	x10,0x0
 11c:	67850513          	addi	x10,x10,1656 # 678 <delay+0xac>
 120:	00000097          	auipc	x1,0x0
 124:	400080e7          	jalr	x1,1024(x1) # 520 <uart_send_str>
#   unsigned char add_list_sep = 0;
 128:	00000793          	addi	x15,x0,0
 12c:	92498993          	addi	x19,x19,-1756
 130:	6d448493          	addi	x9,x9,1748
#     const entity_id id = ents[i];
#     if (!id)
#       break;
#     if (id != active_entity) {
#       if (add_list_sep) {
#         uart_send_str(", ");
 134:	00000b37          	lui	x22,0x0
#   for (unsigned i = 0; i < LOCATION_MAX_ENTITIES; i++) {
 138:	00800a13          	addi	x20,x0,8
#     const entity_id id = ents[i];
 13c:	015b8733          	add	x14,x23,x21
 140:	00e48733          	add	x14,x9,x14
 144:	00074c03          	lbu	x24,0(x14)
#     if (!id)
 148:	040c0263          	beq	x24,x0,18c <describe_current_location+0x108>
#     if (id != active_entity) {
 14c:	9b894703          	lbu	x14,-1608(x18)
 150:	03870a63          	beq	x14,x24,184 <describe_current_location+0x100>
#       if (add_list_sep) {
 154:	00078863          	beq	x15,x0,164 <describe_current_location+0xe0>
#         uart_send_str(", ");
 158:	680b0513          	addi	x10,x22,1664 # 680 <delay+0xb4>
 15c:	00000097          	auipc	x1,0x0
 160:	3c4080e7          	jalr	x1,964(x1) # 520 <uart_send_str>
#       } else {
#         add_list_sep = 1;
#       }
#       uart_send_str(entities[id].name);
 164:	002c1793          	slli	x15,x24,0x2
 168:	018787b3          	add	x15,x15,x24
 16c:	00379793          	slli	x15,x15,0x3
 170:	00f987b3          	add	x15,x19,x15
 174:	0007a503          	lw	x10,0(x15)
 178:	00000097          	auipc	x1,0x0
 17c:	3a8080e7          	jalr	x1,936(x1) # 520 <uart_send_str>
 180:	00100793          	addi	x15,x0,1
#   for (unsigned i = 0; i < LOCATION_MAX_ENTITIES; i++) {
 184:	001b8b93          	addi	x23,x23,1
 188:	fb4b9ae3          	bne	x23,x20,13c <describe_current_location+0xb8>
#     }
#   }
#   // print objects in current location
#   const object_id *objs = locations[current_location].objects;
 18c:	00440a13          	addi	x20,x8,4
 190:	01448a33          	add	x20,x9,x20
#   for (unsigned i = 0; i < LOCATION_MAX_OBJECTS; i++) {
#     const object_id id = objs[i];
 194:	000a4903          	lbu	x18,0(x20)
#     if (!id)
 198:	12090263          	beq	x18,x0,2bc <describe_current_location+0x238>
#       break;
#     if (add_list_sep) {
 19c:	000029b7          	lui	x19,0x2
 1a0:	99c98993          	addi	x19,x19,-1636 # 199c <objects>
 1a4:	00291913          	slli	x18,x18,0x2
 1a8:	10079063          	bne	x15,x0,2a8 <describe_current_location+0x224>
#       uart_send_str(", ");
#     } else {
#       add_list_sep = 1;
#     }
#     uart_send_str(objects[id].name);
 1ac:	01298933          	add	x18,x19,x18
 1b0:	00092503          	lw	x10,0(x18)
#       uart_send_str(entities[id].name);
 1b4:	00100a93          	addi	x21,x0,1
#       uart_send_str(", ");
 1b8:	00000b37          	lui	x22,0x0
#     uart_send_str(objects[id].name);
 1bc:	00000097          	auipc	x1,0x0
 1c0:	364080e7          	jalr	x1,868(x1) # 520 <uart_send_str>
#   for (unsigned i = 0; i < LOCATION_MAX_OBJECTS; i++) {
 1c4:	08000b93          	addi	x23,x0,128
#     const object_id id = objs[i];
 1c8:	015a07b3          	add	x15,x20,x21
 1cc:	0007c903          	lbu	x18,0(x15)
#     if (!id)
 1d0:	02090663          	beq	x18,x0,1fc <describe_current_location+0x178>
#       uart_send_str(", ");
 1d4:	680b0513          	addi	x10,x22,1664 # 680 <delay+0xb4>
#     uart_send_str(objects[id].name);
 1d8:	00291913          	slli	x18,x18,0x2
#       uart_send_str(", ");
 1dc:	00000097          	auipc	x1,0x0
 1e0:	344080e7          	jalr	x1,836(x1) # 520 <uart_send_str>
#     uart_send_str(objects[id].name);
 1e4:	01298933          	add	x18,x19,x18
 1e8:	00092503          	lw	x10,0(x18)
#   for (unsigned i = 0; i < LOCATION_MAX_OBJECTS; i++) {
 1ec:	001a8a93          	addi	x21,x21,1
#     uart_send_str(objects[id].name);
 1f0:	00000097          	auipc	x1,0x0
 1f4:	330080e7          	jalr	x1,816(x1) # 520 <uart_send_str>
#   for (unsigned i = 0; i < LOCATION_MAX_OBJECTS; i++) {
 1f8:	fd7a98e3          	bne	x21,x23,1c8 <describe_current_location+0x144>
#   if (!add_list_sep) {
#     uart_send_str("no one");
#   }
#   // print exits from current location
#   add_list_sep = 0;
#   uart_send_str("\r\nexits: ");
 1fc:	00000537          	lui	x10,0x0
 200:	68c50513          	addi	x10,x10,1676 # 68c <delay+0xc0>
 204:	008484b3          	add	x9,x9,x8
 208:	00001437          	lui	x8,0x1
 20c:	00000097          	auipc	x1,0x0
 210:	314080e7          	jalr	x1,788(x1) # 520 <uart_send_str>
#   for (unsigned i = 0; i < LOCATION_MAX_EXITS; i++) {
 214:	6bc40413          	addi	x8,x8,1724 # 16bc <exit_names>
 218:	01840913          	addi	x18,x8,24
#   add_list_sep = 0;
 21c:	00000793          	addi	x15,x0,0
#     if (locations[current_location].exits[i]) {
 220:	08c4c703          	lbu	x14,140(x9)
 224:	02070463          	beq	x14,x0,24c <describe_current_location+0x1c8>
#       if (add_list_sep) {
 228:	00078a63          	beq	x15,x0,23c <describe_current_location+0x1b8>
#         uart_send_str(", ");
 22c:	00000537          	lui	x10,0x0
 230:	68050513          	addi	x10,x10,1664 # 680 <delay+0xb4>
 234:	00000097          	auipc	x1,0x0
 238:	2ec080e7          	jalr	x1,748(x1) # 520 <uart_send_str>
#       } else {
#         add_list_sep = 1;
#       }
#       uart_send_str(exit_names[i]);
 23c:	00042503          	lw	x10,0(x8)
 240:	00000097          	auipc	x1,0x0
 244:	2e0080e7          	jalr	x1,736(x1) # 520 <uart_send_str>
 248:	00100793          	addi	x15,x0,1
#   for (unsigned i = 0; i < LOCATION_MAX_EXITS; i++) {
 24c:	00440413          	addi	x8,x8,4
 250:	00148493          	addi	x9,x9,1
 254:	fd2416e3          	bne	x8,x18,220 <describe_current_location+0x19c>
#     }
#   }
#   if (!add_list_sep) {
 258:	00079a63          	bne	x15,x0,26c <describe_current_location+0x1e8>
#     uart_send_str("none");
 25c:	00000537          	lui	x10,0x0
 260:	69850513          	addi	x10,x10,1688 # 698 <delay+0xcc>
 264:	00000097          	auipc	x1,0x0
 268:	2bc080e7          	jalr	x1,700(x1) # 520 <uart_send_str>
#   }
#   uart_send_str("\r\n");
# }
 26c:	02812403          	lw	x8,40(x2)
 270:	02c12083          	lw	x1,44(x2)
 274:	02412483          	lw	x9,36(x2)
 278:	02012903          	lw	x18,32(x2)
 27c:	01c12983          	lw	x19,28(x2)
 280:	01812a03          	lw	x20,24(x2)
 284:	01412a83          	lw	x21,20(x2)
 288:	01012b03          	lw	x22,16(x2)
 28c:	00c12b83          	lw	x23,12(x2)
 290:	00812c03          	lw	x24,8(x2)
#   uart_send_str("\r\n");
 294:	00000537          	lui	x10,0x0
 298:	6a050513          	addi	x10,x10,1696 # 6a0 <delay+0xd4>
# }
 29c:	03010113          	addi	x2,x2,48
#   uart_send_str("\r\n");
 2a0:	00000317          	auipc	x6,0x0
 2a4:	28030067          	jalr	x0,640(x6) # 520 <uart_send_str>
#       uart_send_str(", ");
 2a8:	00000537          	lui	x10,0x0
 2ac:	68050513          	addi	x10,x10,1664 # 680 <delay+0xb4>
 2b0:	00000097          	auipc	x1,0x0
 2b4:	270080e7          	jalr	x1,624(x1) # 520 <uart_send_str>
 2b8:	ef5ff06f          	jal	x0,1ac <describe_current_location+0x128>
#   if (!add_list_sep) {
 2bc:	f40790e3          	bne	x15,x0,1fc <describe_current_location+0x178>
#     uart_send_str("no one");
 2c0:	00000537          	lui	x10,0x0
 2c4:	68450513          	addi	x10,x10,1668 # 684 <delay+0xb8>
 2c8:	00000097          	auipc	x1,0x0
 2cc:	258080e7          	jalr	x1,600(x1) # 520 <uart_send_str>
 2d0:	f2dff06f          	jal	x0,1fc <describe_current_location+0x178>

000002d4 <handle_inbuf>:
# 
# void handle_inbuf() {
 2d4:	ff010113          	addi	x2,x2,-16
 2d8:	00812423          	sw	x8,8(x2)
#   uart_send_str("\r\n");
 2dc:	00000437          	lui	x8,0x0
 2e0:	6a040513          	addi	x10,x8,1696 # 6a0 <delay+0xd4>
# void handle_inbuf() {
 2e4:	00112623          	sw	x1,12(x2)
#   uart_send_str("\r\n");
 2e8:	00000097          	auipc	x1,0x0
 2ec:	238080e7          	jalr	x1,568(x1) # 520 <uart_send_str>
#   if (strings_equal(inbuf.line, "i")) {
 2f0:	000005b7          	lui	x11,0x0
 2f4:	00002537          	lui	x10,0x2
 2f8:	6a458593          	addi	x11,x11,1700 # 6a4 <delay+0xd8>
 2fc:	9bc50513          	addi	x10,x10,-1604 # 19bc <inbuf>
 300:	00000097          	auipc	x1,0x0
 304:	d54080e7          	jalr	x1,-684(x1) # 54 <strings_equal>
 308:	02050263          	beq	x10,x0,32c <handle_inbuf+0x58>
#     describe_inventory();
 30c:	00000097          	auipc	x1,0x0
 310:	070080e7          	jalr	x1,112(x1) # 37c <describe_inventory>
#     uart_send_str("\r\n");
 314:	6a040513          	addi	x10,x8,1696
#   }
#   entities[active_entity].location++;
#   if (entities[active_entity].location > 3) {
#     entities[active_entity].location = 1;
#   }
# }
 318:	00812403          	lw	x8,8(x2)
 31c:	00c12083          	lw	x1,12(x2)
 320:	01010113          	addi	x2,x2,16
#     uart_send_str("\r\n");
 324:	00000317          	auipc	x6,0x0
 328:	1fc30067          	jalr	x0,508(x6) # 520 <uart_send_str>
#   entities[active_entity].location++;
 32c:	000027b7          	lui	x15,0x2
 330:	9b87c683          	lbu	x13,-1608(x15) # 19b8 <active_entity>
 334:	000027b7          	lui	x15,0x2
 338:	92478793          	addi	x15,x15,-1756 # 1924 <entities>
 33c:	00269713          	slli	x14,x13,0x2
 340:	00d70733          	add	x14,x14,x13
 344:	00371713          	slli	x14,x14,0x3
 348:	00e787b3          	add	x15,x15,x14
 34c:	0047c703          	lbu	x14,4(x15)
#   if (entities[active_entity].location > 3) {
 350:	00300693          	addi	x13,x0,3
#   entities[active_entity].location++;
 354:	00170713          	addi	x14,x14,1
 358:	0ff77713          	andi	x14,x14,255
#   if (entities[active_entity].location > 3) {
 35c:	00e6ec63          	bltu	x13,x14,374 <handle_inbuf+0xa0>
#     entities[active_entity].location = 1;
 360:	00e78223          	sb	x14,4(x15)
# }
 364:	00c12083          	lw	x1,12(x2)
 368:	00812403          	lw	x8,8(x2)
 36c:	01010113          	addi	x2,x2,16
 370:	00008067          	jalr	x0,0(x1)
#     entities[active_entity].location = 1;
 374:	00100713          	addi	x14,x0,1
 378:	fe9ff06f          	jal	x0,360 <handle_inbuf+0x8c>

0000037c <describe_inventory>:
# 
# void describe_inventory() {
#   uart_send_str("u have: ");
 37c:	00000537          	lui	x10,0x0
# void describe_inventory() {
 380:	fe010113          	addi	x2,x2,-32
#   uart_send_str("u have: ");
 384:	6a850513          	addi	x10,x10,1704 # 6a8 <delay+0xdc>
# void describe_inventory() {
 388:	00812c23          	sw	x8,24(x2)
 38c:	00912a23          	sw	x9,20(x2)
 390:	00112e23          	sw	x1,28(x2)
 394:	01212823          	sw	x18,16(x2)
 398:	01312623          	sw	x19,12(x2)
 39c:	01412423          	sw	x20,8(x2)
 3a0:	01512223          	sw	x21,4(x2)
#   uart_send_str("u have: ");
 3a4:	00000097          	auipc	x1,0x0
 3a8:	17c080e7          	jalr	x1,380(x1) # 520 <uart_send_str>
#   bool add_list_sep = FALSE;
#   const object_id *inv = entities[active_entity].inventory;
 3ac:	000027b7          	lui	x15,0x2
 3b0:	9b87c783          	lbu	x15,-1608(x15) # 19b8 <active_entity>
 3b4:	00279413          	slli	x8,x15,0x2
 3b8:	00f40433          	add	x8,x8,x15
 3bc:	00341413          	slli	x8,x8,0x3
 3c0:	000027b7          	lui	x15,0x2
 3c4:	00540413          	addi	x8,x8,5
 3c8:	92478793          	addi	x15,x15,-1756 # 1924 <entities>
 3cc:	00f40433          	add	x8,x8,x15
#   for (unsigned i = 0; i < ENTITY_MAX_OBJECTS; i++) {
#     const object_id id = inv[i];
 3d0:	00044483          	lbu	x9,0(x8)
#     if (!id)
 3d4:	08048063          	beq	x9,x0,454 <describe_inventory+0xd8>
#     if (add_list_sep) {
#       uart_send_str(", ");
#     } else {
#       add_list_sep = TRUE;
#     }
#     uart_send_str(objects[id].name);
 3d8:	000029b7          	lui	x19,0x2
#   for (unsigned i = 0; i < ENTITY_MAX_OBJECTS; i++) {
 3dc:	00000913          	addi	x18,x0,0
#     uart_send_str(objects[id].name);
 3e0:	99c98993          	addi	x19,x19,-1636 # 199c <objects>
#   for (unsigned i = 0; i < ENTITY_MAX_OBJECTS; i++) {
 3e4:	02000a13          	addi	x20,x0,32
#       uart_send_str(", ");
 3e8:	00000ab7          	lui	x21,0x0
#     uart_send_str(objects[id].name);
 3ec:	00249493          	slli	x9,x9,0x2
 3f0:	009984b3          	add	x9,x19,x9
 3f4:	0004a503          	lw	x10,0(x9)
#   for (unsigned i = 0; i < ENTITY_MAX_OBJECTS; i++) {
 3f8:	00190913          	addi	x18,x18,1
#     uart_send_str(objects[id].name);
 3fc:	00000097          	auipc	x1,0x0
 400:	124080e7          	jalr	x1,292(x1) # 520 <uart_send_str>
#   for (unsigned i = 0; i < ENTITY_MAX_OBJECTS; i++) {
 404:	01490863          	beq	x18,x20,414 <describe_inventory+0x98>
#     const object_id id = inv[i];
 408:	012407b3          	add	x15,x8,x18
 40c:	0007c483          	lbu	x9,0(x15)
#     if (!id)
 410:	02049a63          	bne	x9,x0,444 <describe_inventory+0xc8>
#   }
#   if (!add_list_sep) {
#     uart_send_str("nothing");
#   }
#   uart_send_str("\r\n");
# }
 414:	01812403          	lw	x8,24(x2)
 418:	01c12083          	lw	x1,28(x2)
 41c:	01412483          	lw	x9,20(x2)
 420:	01012903          	lw	x18,16(x2)
 424:	00c12983          	lw	x19,12(x2)
 428:	00812a03          	lw	x20,8(x2)
 42c:	00412a83          	lw	x21,4(x2)
#   uart_send_str("\r\n");
 430:	00000537          	lui	x10,0x0
 434:	6a050513          	addi	x10,x10,1696 # 6a0 <delay+0xd4>
# }
 438:	02010113          	addi	x2,x2,32
#   uart_send_str("\r\n");
 43c:	00000317          	auipc	x6,0x0
 440:	0e430067          	jalr	x0,228(x6) # 520 <uart_send_str>
#       uart_send_str(", ");
 444:	680a8513          	addi	x10,x21,1664 # 680 <delay+0xb4>
 448:	00000097          	auipc	x1,0x0
 44c:	0d8080e7          	jalr	x1,216(x1) # 520 <uart_send_str>
 450:	f9dff06f          	jal	x0,3ec <describe_inventory+0x70>
#     uart_send_str("nothing");
 454:	00000537          	lui	x10,0x0
 458:	6b450513          	addi	x10,x10,1716 # 6b4 <delay+0xe8>
 45c:	00000097          	auipc	x1,0x0
 460:	0c4080e7          	jalr	x1,196(x1) # 520 <uart_send_str>
 464:	fb1ff06f          	jal	x0,414 <describe_inventory+0x98>

00000468 <input_inbuf>:
# 
# void input_inbuf() {
 468:	fe010113          	addi	x2,x2,-32
 46c:	00812c23          	sw	x8,24(x2)
 470:	00002437          	lui	x8,0x2
 474:	01212823          	sw	x18,16(x2)
 478:	01312623          	sw	x19,12(x2)
 47c:	01412423          	sw	x20,8(x2)
 480:	01512223          	sw	x21,4(x2)
 484:	00112e23          	sw	x1,28(x2)
 488:	00912a23          	sw	x9,20(x2)
#   while (1) {
#     const char ch = uart_read_char();
#     uart_send_char(ch);
#     if (ch == CHAR_BACKSPACE) {
 48c:	07f00993          	addi	x19,x0,127
 490:	9bc40413          	addi	x8,x8,-1604 # 19bc <inbuf>
#       if (inbuf.ix > 0) {
#         inbuf.ix--;
#       }
#     } else if (ch == CHAR_CARRIAGE_RETURN ||
 494:	00d00a13          	addi	x20,x0,13
 498:	04f00a93          	addi	x21,x0,79
#       return;
#     } else {
#       inbuf.line[inbuf.ix] = ch;
#       inbuf.ix++;
#     }
#     *leds = inbuf.ix;
 49c:	00002937          	lui	x18,0x2
#     const char ch = uart_read_char();
 4a0:	00000097          	auipc	x1,0x0
 4a4:	114080e7          	jalr	x1,276(x1) # 5b4 <uart_read_char>
 4a8:	00050493          	addi	x9,x10,0
#     uart_send_char(ch);
 4ac:	00000097          	auipc	x1,0x0
 4b0:	0f0080e7          	jalr	x1,240(x1) # 59c <uart_send_char>
#       if (inbuf.ix > 0) {
 4b4:	05044783          	lbu	x15,80(x8)
#     if (ch == CHAR_BACKSPACE) {
 4b8:	03349063          	bne	x9,x19,4d8 <input_inbuf+0x70>
#       if (inbuf.ix > 0) {
 4bc:	00078663          	beq	x15,x0,4c8 <input_inbuf+0x60>
#         inbuf.ix--;
 4c0:	fff78793          	addi	x15,x15,-1
#       inbuf.ix++;
 4c4:	04f40823          	sb	x15,80(x8)
#     *leds = inbuf.ix;
 4c8:	9a892783          	lw	x15,-1624(x18) # 19a8 <leds>
 4cc:	05044703          	lbu	x14,80(x8)
 4d0:	00e78023          	sb	x14,0(x15)
#   while (1) {
 4d4:	fcdff06f          	jal	x0,4a0 <input_inbuf+0x38>
#     } else if (ch == CHAR_CARRIAGE_RETURN ||
 4d8:	01448463          	beq	x9,x20,4e0 <input_inbuf+0x78>
 4dc:	03579a63          	bne	x15,x21,510 <input_inbuf+0xa8>
#       inbuf.line[inbuf.ix] = 0;
 4e0:	00f407b3          	add	x15,x8,x15
 4e4:	00078023          	sb	x0,0(x15)
#       inbuf.ix = 0;
 4e8:	04040823          	sb	x0,80(x8)
#   }
# }
 4ec:	01c12083          	lw	x1,28(x2)
 4f0:	01812403          	lw	x8,24(x2)
 4f4:	01412483          	lw	x9,20(x2)
 4f8:	01012903          	lw	x18,16(x2)
 4fc:	00c12983          	lw	x19,12(x2)
 500:	00812a03          	lw	x20,8(x2)
 504:	00412a83          	lw	x21,4(x2)
 508:	02010113          	addi	x2,x2,32
 50c:	00008067          	jalr	x0,0(x1)
#       inbuf.line[inbuf.ix] = ch;
 510:	00f40733          	add	x14,x8,x15
 514:	00970023          	sb	x9,0(x14)
#       inbuf.ix++;
 518:	00178793          	addi	x15,x15,1
 51c:	fa9ff06f          	jal	x0,4c4 <input_inbuf+0x5c>

00000520 <uart_send_str>:
# 
# void uart_send_str(const char *str) {
#   while (*str) {
#     while (*uart_out)
 520:	000026b7          	lui	x13,0x2
#   while (*str) {
 524:	00054783          	lbu	x15,0(x10)
 528:	00079463          	bne	x15,x0,530 <uart_send_str+0x10>
#       ;
#     *uart_out = *str++;
#   }
# }
 52c:	00008067          	jalr	x0,0(x1)
#     while (*uart_out)
 530:	9ac6a703          	lw	x14,-1620(x13) # 19ac <uart_out>
 534:	00074603          	lbu	x12,0(x14)
 538:	fe061ee3          	bne	x12,x0,534 <uart_send_str+0x14>
#     *uart_out = *str++;
 53c:	00150513          	addi	x10,x10,1
 540:	00f70023          	sb	x15,0(x14)
 544:	fe1ff06f          	jal	x0,524 <uart_send_str+0x4>

00000548 <uart_send_hex_byte>:
# 
# void uart_send_hex_byte(char ch) {
 548:	ff010113          	addi	x2,x2,-16
 54c:	00812423          	sw	x8,8(x2)
 550:	00050413          	addi	x8,x10,0
#   uart_send_hex_nibble((ch & 0xf0) >> 4);
 554:	00455513          	srli	x10,x10,0x4
# void uart_send_hex_byte(char ch) {
 558:	00112623          	sw	x1,12(x2)
#   uart_send_hex_nibble((ch & 0xf0) >> 4);
 55c:	00000097          	auipc	x1,0x0
 560:	020080e7          	jalr	x1,32(x1) # 57c <uart_send_hex_nibble>
#   uart_send_hex_nibble(ch & 0x0f);
 564:	00f47513          	andi	x10,x8,15
# }
 568:	00812403          	lw	x8,8(x2)
 56c:	00c12083          	lw	x1,12(x2)
 570:	01010113          	addi	x2,x2,16
#   uart_send_hex_nibble(ch & 0x0f);
 574:	00000317          	auipc	x6,0x0
 578:	00830067          	jalr	x0,8(x6) # 57c <uart_send_hex_nibble>

0000057c <uart_send_hex_nibble>:
# 
# void uart_send_hex_nibble(char nibble) {
#   if (nibble < 10) {
 57c:	00900793          	addi	x15,x0,9
 580:	00a7ea63          	bltu	x15,x10,594 <uart_send_hex_nibble+0x18>
#     uart_send_char('0' + nibble);
 584:	03050513          	addi	x10,x10,48
#   } else {
#     uart_send_char('A' + (nibble - 10));
 588:	0ff57513          	andi	x10,x10,255
 58c:	00000317          	auipc	x6,0x0
 590:	01030067          	jalr	x0,16(x6) # 59c <uart_send_char>
 594:	03750513          	addi	x10,x10,55
 598:	ff1ff06f          	jal	x0,588 <uart_send_hex_nibble+0xc>

0000059c <uart_send_char>:
#   }
# }
# 
# void uart_send_char(char ch) {
#   while (*uart_out)
 59c:	000027b7          	lui	x15,0x2
 5a0:	9ac7a783          	lw	x15,-1620(x15) # 19ac <uart_out>
 5a4:	0007c703          	lbu	x14,0(x15)
 5a8:	fe071ee3          	bne	x14,x0,5a4 <uart_send_char+0x8>
#     ;
#   *uart_out = ch;
 5ac:	00a78023          	sb	x10,0(x15)
# }
 5b0:	00008067          	jalr	x0,0(x1)

000005b4 <uart_read_char>:
# 
# char uart_read_char() {
#   char ch;
#   while ((ch = *uart_in) == 0)
 5b4:	000027b7          	lui	x15,0x2
 5b8:	9b07a703          	lw	x14,-1616(x15) # 19b0 <uart_in>
 5bc:	00074783          	lbu	x15,0(x14)
 5c0:	0ff7f513          	andi	x10,x15,255
 5c4:	fe078ce3          	beq	x15,x0,5bc <uart_read_char+0x8>
#     ;
#   return ch;
# }
 5c8:	00008067          	jalr	x0,0(x1)

000005cc <delay>:
# 
# inline void delay(volatile unsigned int ticks) {
 5cc:	ff010113          	addi	x2,x2,-16
 5d0:	00a12623          	sw	x10,12(x2)
#   while (ticks--)
 5d4:	00c12783          	lw	x15,12(x2)
 5d8:	fff78713          	addi	x14,x15,-1
 5dc:	00e12623          	sw	x14,12(x2)
 5e0:	fe079ae3          	bne	x15,x0,5d4 <delay+0x8>
#     ;
# }
 5e4:	01010113          	addi	x2,x2,16
 5e8:	00008067          	jalr	x0,0(x1)
